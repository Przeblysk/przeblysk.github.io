[{"content":"基本上的表现为 xx command not found 例如 npx command not found. yarn command not found.\n解决办法\n在用户根目录新建.huskyrc 将环境写入其中，例如 nvm 安装的 node 环境\nexport NVM_DIR=\u0026#34;$HOME/.nvm\u0026#34; [ -s \u0026#34;$NVM_DIR/nvm.sh\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;$NVM_DIR/nvm.sh\u0026#34; # This loads nvm [ -s \u0026#34;$NVM_DIR/bash_completion\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;$NVM_DIR/bash_completion\u0026#34; # This loads nvm bash_completion export PATH=$HOME/.nvm/versions/node/v16.13.0/bin:$PATH # Add yarn to path ","date":"0001-01-01T00:00:00Z","image":"https://example.com/p/git-commit-husky-npx-not-found/animal-6889575_1920_hu43cac7221031abb7e9dcf7826291a482_434664_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/git-commit-husky-npx-not-found/","title":"git commit husky npx not found"},{"content":"问题表现为启动vscode的时候右下角会有一个提示Unable to resolve your shell environment in a reasonable time. Please review your shell configuration.\n在GitHub上有同样的issue被提出：Unable to resolve your shell environment notification after VS Code restored during MacOS restart · Issue #113869 · microsoft/vscode (github.com)\n官网描述地址Visual Studio Code Frequently Asked Questions\n我的解决方案是在vscode中不主动加载nvm环境，我的本地配置文件是**.zshrc**，因为我是用的是ohmyzsh。\n修改**.zshrc**配置如下\nfunction load_nvm() { export NVM_DIR=\u0026#34;$HOME/.nvm\u0026#34; [ -s \u0026#34;$NVM_DIR/nvm.sh\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;$NVM_DIR/nvm.sh\u0026#34; # This loads nvm [ -s \u0026#34;$NVM_DIR/bash_completion\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;$NVM_DIR/bash_completion\u0026#34; # This loads nvm bash_completion } # nvm if [[ \u0026#34;x${TERM_PROGRAM}\u0026#34; = \u0026#34;xvscode\u0026#34; ]]; then echo \u0026#39;in vscode, nvm not work; use `load-nvm`\u0026#39;; else load_nvm fi 这样就解决啦 :)\n","date":"0001-01-01T00:00:00Z","image":"https://example.com/p/unable-to-resolve-your-shell-environment-in-a-reasonable-time.-please-review-your-shell-configuration./winter-gbf2e41a68_1920_hu38ab86526c29dcb7767742b2231e4a2d_442358_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/unable-to-resolve-your-shell-environment-in-a-reasonable-time.-please-review-your-shell-configuration./","title":"Unable to resolve your shell environment in a reasonable time. Please review your shell configuration."},{"content":"在 Taro 中使用 Lottie 选择 目前小程序的 Lottie 插件有两个：\n wechat-miniprogram/lottie-miniprogram: lottie for miniprogram (github.com) landn172/lottie-miniapp: lottie mniapp 小程序 (github.com)  一个是微信官方维护的小程序 Lottie 插件，另一个是比官方更早出的社区版本。\n两个版本都有用户在使用，相比之下官方的库最近的更新时间更加新一些，因为都是对官方 LottieWeb 库的改造和依赖，所以大体上不会有太大的区别，任选其一都可以。\n在 Taro 项目中安装 // 使用yarn或者npm安装node包 yarn add lottie-miniprogram npm install lottie-miniprogram 在页面中使用 引入 lottie 首先我么需要在页面中引入我们的 Lottie 库\nimport lottie from 'lottie-miniprogram'\n创建 canvas 容器 目前小程序只支持以 canvas 的方式去渲染 Lottie，所以我们需要初始化一个 canvas 容器给 Lottie 使用。\n微信小程序对 canvas 有更新，目前有新旧两种方式使用 canvas 组件。\n从基础库 2.9.0 起支持一套新 Canvas 2D 接口（需指定 type 属性），同时支持同层渲染。所有我们的示例会使用新的方式来使用。\n我们在页面上定义一个 canvas，代码如下\n\u0026lt;Canvas id=\u0026#39;canvas\u0026#39; type=\u0026#39;2d\u0026#39; style={{ width: \u0026#39;100%\u0026#39;, height: \u0026#39;375px\u0026#39;, opacity: 0 }} /\u0026gt; 我们定义了一个type为 2d、id 为 canvas 的 canvas。这个容器之后会给 Lottie 使用。\n初始化 Lottie 现在我们已经有了一个 Canvas 容器，接下来我们需要在页面中初始化 Lottie，具体的代码如下：\nReact.useEffect(() =\u0026gt; { Taro.nextTick(() =\u0026gt; { Taro.createSelectorQuery() .select(\u0026#39;#canvas\u0026#39;) .node((res: any) =\u0026gt; { if (res) { const canvas = res.node const context = canvas.getContext(\u0026#39;2d\u0026#39;) let pixelRatio = 2 pixelRatio = sysInfo?.pixelRatio || pixelRatio context.scale(pixelRatio, pixelRatio) canvas.width = canvas._width * pixelRatio canvas.height = canvas._height * pixelRatio lottie.setup(canvas) lottieRef.current = lottie.loadAnimation({ loop: false, autoplay: false, path: \u0026#39;https://assets7.lottiefiles.com/private_files/lf30_blzqtgs6.json\u0026#39;, rendererSettings: { context, }, }) lottieRef.current.goToAndStop(40, true) } }) .exec() }) }, [sysInfo]) 我们在 useEffect 中使用 Taro.createSelectorQuery() 根据之前定义的 id 来获取到 canvas。\n然后使用了 canvas.getContext('2d') 来获取 canvas 的上下文。\n接着我们使用了系统信息去对 canvas 进行了缩放。\n然后有一行很重要的代码：lottie.setup(canvas) 这一步很重要，我们在调用 Lottie 的接口之前，一定要把 canvas 传入。\n接下来我们调用了 Lottie 的一个方法 loadAnimation 。它接受一个类型为 LoadAnimationParameter 的参数。具体的属性如下：\ninterface LoadAnimationParameter { renderer?: \u0026#39;canvas\u0026#39; // 默认使用canvas渲染，官方没有把该属性放出  loop?: boolean | number // 是否重复播放  autoplay?: boolean // 是否自动播放  name?: string // 名称只供参考而已  rendererSettings?: CanvasRendererConfig // 用来接受canvas上下文  animationData?: any // 动画数据  path?: string // 动画地址 } 在我们代码中，我们设置了 loop、autoplay、path 以及 rendererSettings。\n接下来我们又马上调用了 Lottie 的一个方法 goToAndStop ，从字面上就很好理解，这个方法就是将动画暂停在我们设置的那个时间点。它接受了 2 个参数，第一个参数是要停止的位置，第二个参数是第一个参数的单位是否是帧。因为我们的 Lottie 动画其实是帧动画，所以这个帧应该也不难理解。\nLottie 中的方法 interface LoadAnimationReturnType { play(): void stop(): void pause(): void setSpeed(speed: number): void goToAndPlay(value: number, isFrame?: boolean): void goToAndStop(value: number, isFrame?: boolean): void setDirection(direction: AnimationDirection): void playSegments( segments: AnimationSegment | AnimationSegment[], forceFlag?: boolean ): void setSubframe(useSubFrames: boolean): void destroy(): void getDuration(inFrames?: boolean): number triggerEvent\u0026lt;T = any\u0026gt;(name: AnimationEventName, args: T): void addEventListener\u0026lt;T = any\u0026gt;( name: AnimationEventName, callback: AnimationEventCallback\u0026lt;T\u0026gt; ): void removeEventListener\u0026lt;T = any\u0026gt;( name: AnimationEventName, callback: AnimationEventCallback\u0026lt;T\u0026gt; ): void } 在 lottie-miniprogram 的类型定义文件中一共有以上这些方法。\n play 播放 stop 停止 pause 暂停 setSpeed 设置倍数 goToAndPlay 跳到某处播放 goToAndStop 跳到某处暂停 setDirection 设置方向 playSegments 播放指定片段 setSubframe 是否使用原生 AE FPS destroy 销毁实例 getDuration 获取时长  为所欲为 初始化完 Lottie 后，我们就可以使用 Lottie 中的方法对 Lottie 动画为所欲为啦。\n","date":"0001-01-01T00:00:00Z","image":"https://example.com/p/%E5%9C%A8taro%E4%B8%AD%E4%BD%BF%E7%94%A8lottie/pexels-tobi-620337_hu3d03a01dcc18bc5be0e67db3d8d209a6_870648_120x120_fill_q75_box_smart1.jpg","permalink":"https://example.com/p/%E5%9C%A8taro%E4%B8%AD%E4%BD%BF%E7%94%A8lottie/","title":"在Taro中使用Lottie"}]